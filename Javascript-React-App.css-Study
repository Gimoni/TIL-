import logo from './logo.svg';
import './App.css';

export default App;

// function App() {
//   return <h1>Hello React</h1>
// }

// # JSX 
// JavaScript의 확장문법
// 선언형 문법
// Babel 이 JSX를 JavaScript Object로 변환한다
// Babel = JavaScrip이 트랜스컴파일러이다. 

// function App() {
//   return <h1>Hello React</h1>
// }

// JSX 없이 Virtual DOM 만들기
// function App() {
//   const h1 = React.createElement('h1', 'null', 'Hello React');

//   return h1;
// }

// # JSX 문법
// function App() {
//   return (
//     <div>
//       <h2>elements는 하나의 element로 감싸져야 한다</h2>
//       <div>Foo</div>
//       <div>Bar</div>
//       <div>Baz</div>
//     </div>
//   )
// }

// function App() {
//   return (
//     <div>
//       <h2>elements를 하나의 element로 감싸지 않은 경우 에러 발생</h2>
//       <div>Foo</div>
//       <div>Bar</div>
//       <div>Baz</div>
//     </div>
//   ) 
// }

// React.Fragment

// function App() {
//   return (
//     // DOM에 element를 추가하지 않고 자식을 그룹화 할 수 있다.
//     <React.Fragment>
//       <h2>React.Fragment</h2>
//       <div>Foo</div>
//       <div>Bar</div>
//       <div>Baz</div>
//     </React.Fragment>
//   )
// }

// function App() {
//   return (
//     <>
//       <h2>React.Fragment</h2>
//       <div>Foo</div>
//       <div>Bar</div>
//       <div>Baz</div>
//     </>
//   )
// }

// JSX attribute

// function App() {
//   return (
//     <>
//       <h2>JSX attribute</h2>
//       <ul>
//         <li><a href="#" target="_blank">Foo</a></li>
//         <li><img src="" alt="Bar" /></li>
//         <li><input type="text" placeholder="Baz" autoComplete="off"/></li>
//       </ul>
//     </>
//   )
// }

//JSX inline style attribute

// function App() {
//   return (
//     <>
//       <h2>JSX inline style</h2>
//       {/* style attribute에 object를 인자로 전달한다*/}
//       <ul style={{border: 1px }}>  ?????
//         <li style={{textDecoration: "underline"}}>Foo</li>
//         <li>bar</li>
//         <li>baz</li>
//       </ul>
//     </>
//   )
// }

//JSX 내에서 JS 코드 작성하기

// function App() {
//   const foo ="Foo";

//   return (
//     <>
//       <h2>JSX 내에서 코드 작성하기</h2>
//       <div>{foo}</div>
//       <div>{"Ba"+"r"}</div>
//       <div>{"Baz".valueOf()}</div>
//     </>
//   )
// }

// Q. JavaScript 변수와 inline style을 사용하여 virtualDOM을 완성시켜보세요
// function App() {
//   const dutchBeer = "Heineken";
//   const irishBeer = "Guinness";
//   const japanBeer = "Asahi";

//   const soldOut = {
//     textDectoration: "line-through",
//     color: "#ddd"
//   }

//   return (
//     <>
//     <h2>Beers</h2>
//         <li>{dutchBeer}</li>
//         <li style={soldOut}>{irishBeer}</li>
//         <li>{japanBeer}</li>
//     </>
//   )
// }

//JSX 내에서 조건문 사용하기 
// 논리연산자, 삼항연산자
// && (AND) : expr1 && expr2
// || (OR) : expr1 || expr2
// ! (NOT)
// 삼항연산자 (Ternary) : 조건? expr if true : expr if false

// function App() {

//   //&&
//   console.log(true && 1); //1
//   console.log(1 && 0); //0
//   console.log(0 && 1); //0
//   console.log(0 && false); //0

//   console.log(1>0 && 2>0) //true

//   // ||

//   console.log(1 || true); //1
//   console.log(1 || 0); //1
//   console.log(0 && 1); //0
//   console.log(0 && false); //0   -> 1 true, 0 false

//   return (
//     <>
//         <h2>JSX내에서 조건문 사용하기</h2>
//         <div>{true && "Foo"}</div> 
//         <div>{false || "Bar"}</div> 
//         <div>{!true ? "" : "Baz"}</div>
//     </>
//   )
// }

//JSX 내에서 반복문 사용하기

// function App() {
//   const arr = ["Foo", "Bar", "Baz"];

//   return (
//     <>
//       <h2>JSX에서 반복문</h2>
//       <ul>
//         {arr.map((item, index) =>(
//           <li key={index}>{item}</li>
//         ))}
//       </ul>
//     </>
//   )
// }

// function App() {
//   const arr = ["Foo","Bar","Baz"];

//   return (
//     <>
//       <h2>JSX에서 반복문</h2>
//       <ul>
//         {arr.map((item, index) => (
//           <li key={index}>{item}</li>
//         ))}
//       </ul>
//     </>
//   )
// }

// function App() {
//   const arr = ["Foo", "Bar", "Baz"];

//   const list = arr.map((item, index) => (
//     <li key={index}>{item}</li>
//   ))
//   return(
//     <>
//       <h2>JSX 반복문</h2>
//       <ul>
//         {list}
//       </ul>
//     </>
//   )
// }

// function App() {
//   const arr = ["Foo", "Bar", "Baz"];

//   const list = arr.map((item, index) => (
//     <li key={index}>{item}</li>
//   ))

//   return (
//     <>
//       <h2>JSX 반복문</h2>
//       <ul>
//         {list}
//       </ul>
//     </>
//   )
// }

// //화살표함수 중괄호 생략 설명
// function App() {}

// // // 화살표함수에서 {} (중괄호)가 없으면 화살표 뒤의 값을 return한다
// // const f = () => "foo"

// // // const f = () => {
// // //   return "foo"
// // // }

// // console.log(f())




// //Q. 반복문을 사용해서 맥주 리스트를 출력해보세요 

// const beers = [
//   {name: "Heineken", origin: "Netherlands"},
//   {name: "Guinness", origin: "Ireland"},
//   {name: "Asahi", origin: "Japan"}
// ]


// function App() {
  
//   const beers = [
//     {name: "Heineken", origin: "Netherlands"},
//     {name: "Guinness", origin: "Ireland"},
//     {name: "Asahi", origin: "Japan"}
//   ]

//   const list = beers.map((beers, index) => (
//     <li key={index}>{beers.name}, {beers.origin}</li>
//   ))

//   // const list = beers.map((beer,index) => {
//   //   return <li key={index}>{beer.name}</li>
//   // })

//   // const list = beers.map((beers, index) => <li key={index}>{beers.name}</li>)

//   return (
//     <>
//       <h2>Beers</h2>
//       <ul>
//         {list}
//       </ul>
//     </>
//   )
// }


// # COMPONENTS (컴포넌트)
// 정의: 복잡한 UI를 빌드하기 위한 재사용 가능하고 독립적인 부품

// 컴포넌트 기본 
// 함수컴포넌터와 클래스 컴포넌트가 있다

// App Components
// 함수컴포넌트는 기본적으로 함수이다. 
// function App() {

//   // 코드 작성
//   console.log("App Loaded!")

//   // VirtualDOM을 return한다
//   return <h1>App</h1>
// }

// 컴포넌트의 합성 (Composition)
// 코드를 재사용한다

// 컴포넌트의 첫글자는 대문자여야 한다.
// function Foo() {
//   return <li>Foo</li>
// }
// function Bar() {
//   return <li>Bar</li>
// }
// function Baz() {
//   return <li>Baz</li>
// }

// function App() {
//   return (
//     <>
//       <ul>
//         {/*컴포넌트를 합성했다*/}
//         <Foo/>
//         <Bar/>
//         <Baz/>
//       </ul>
//     </>
//   )
// }

// Q. 맥주표를 table element를 이용해서 완성해보세요.
//making beer table with components

// function DutchBeer() {
//   return (
//     <tr>
//       <td>Heineken</td>
//       <td>Netherlands</td>
//       <td>Yes</td>
//     </tr>
//   )
// }

// function IrishBeer() {
//   return (
//     <tr>
//       <td>Guinness</td>
//       <td>Ireland</td>
//       <td>No</td>
//     </tr>
//   )
// }

// function JapaneseBeer() {
//   return (
//       <tr>
//         <td>Asahi</td>
//         <td>Japan</td>
//         <td>Yes</td>
//       </tr>
//   )
// }

// function App() {
//   return (
//     <>
//       <h1>Beers</h1>
//       <table>
//         <thead>
//           <tr>
//             <td>Brand</td>
//             <td>Origin</td>
//             <td>Available</td>
//           </tr>
//         </thead>
//         <tbody>
//           <DutchBeer />
//           <IrishBeer />
//           <JapaneseBeer />
//         </tbody>
//       </table>
//     </>
//   )
// }

// # Props
// 컴포넌트에 전달되는 인자 (parameter)

// function C(props) { // properties (Object)
//   console.log(props); // {key: value,...} 
//   const prop1 = props.prop1;

//   return <li>{prop1}</li>
// }

// function App() {
//   return (
//     <>
//       <h1>App</h1>
//       <ul>
//         {/* C 컴포넌트를 재사용했다 */}
//         <C prop1="Foo" />
//         <C prop1="Bar" />
//         <C prop1="Baz" />
//       </ul>
//     </>
//   )
// }

// Q. using comfornents to make beers list.
// function C(props) {
//   console.log(props);
//   const prop1 = props.prop1;

//   return <li>{props}</li>
// }

// function App() {
//   <>
//     <h1>Beers</h1>
//     <ul>
//       <C prop1="Heineken, Netherlands" />
//       <C prop1="Guinness, Ireland" />
//       <C prop1="Asahi, Japan" />
//     </ul>
//   </>
// } // ERROR

// function Beer(props) {
//   console.log(props);

//   const name = props.name;
//   const origin = props.origin;

//   return <li>{name}, {origin}</li>
// }

// function App() {
//   return (
//     <>
//       <h1>Beers</h1>
//       <ul>
//         <Beer name="Heineken" origin="Netherlands"/>
//         <Beer name="Guinness" origin="Ireland"/>
//         <Beer name="Asahi" origin="Japan"/>
//       </ul>
//     </>
//   )
// }

// Object props

// function C(props) {
//   console.log(props);

//   const o = props.o;

//   return (
//     <ul>
//       <li>Prop1: {o.prop1}</li>
//       <li>Prop2: {o.prop2}</li>
//       <li>Prop3: {o.prop3}</li>
//     </ul>
//   )
// }

// const o = {prop1: "Foo", prop2: "Bar", prop3: "Baz"};

// function App() {
//   return (
//     <>
//       <h1>o</h1>
//       <C o={o}/>
//     </>
//   )
// }

// Q. 삼항연산자 있음... 

// function Beer(props) {
//   const beer = props.beer;

//   return (
//     <ul>
//       <li>Name: {beer.name}</li>
//       <li>Origin: {beer.origin}</li>
//       <li>Available: {beer.available ? "Yes" : "No"}</li>
//     </ul>
//   )
// }

// const irishBeer = {name: "Guinness", origin: "Ireland", Available: "false"};

// function App() {
//   return (
//     <>
//       <h1>Beer</h1>
//       <Beer beer={irishBeer} />
//     </>
//   )
// }

// Q. 컴포넌트 반복적으로 출력하기
// JSX 에서 Array.map()를 사용하세요.
// Object props가 전달이 되겠죠? 
// const beers = [
//   {name: "Heineken", origin: "Netherlands"},
//   {name: "Guinness", origin: "Ireland"},
//   {name: "Asahi", origin: "Japan"},
// ]

// const beersList = arr.beers

// function Beer(props) {
//   console.log(props);

//   return (
//     <>
//       <li>{arr.beers}</li>
//     </>
//   )
// }

// function App() {
//   return (
//     <>
//       <h1>Beer</h1>
//       <
//     </>
//   )
// }


// Question - Answer

// const beers = [
//     {name: "Heineken", origin: "Netherlands"},
//     {name: "Guinness", origin: "Ireland"},
//     {name: "Asahi", origin: "Japan"},
// ]

// function Beer(props) {
  
//   const beer = props.beer;

//   return <li>{beer.name}, {beer.origin}</li>
// }

// function App() {

//   const list = beers.map((beer, index) => (
//     <Beer key={index} beer={beer} />
//   ));

//   return (
//     <>
//       <h1>Beers</h1>
//       <ul>
//         {list}
//       </ul>
//     </>
//   )
// }


// Children props;

// function C(props) {
//   console.log(props); // console.log --> {children :...}
//   // children은 속성 키가  children이다. 
//   const children = props.children;

//   return (
//     <fieldset>
//       <legend>C</legend>
//       {children}
//     </fieldset>
//   )
// }

// function Foo() {
//   return <div>Foo</div>
// }

// function App() {
//   return (
//     <>
//       <h1>App</h1>
//       <C>
//         {/* {Foo 컴포넌트는 C컴포넌트의 children이다} */}
//         <Foo />
//       </C>
//     </>
//   )
// }
  
// Q. children props를 이용해서 맥주 리스트를 만들어보세요

// Gimon .. ERROR
// function Beer(props) {
//   const children = props.children;

//   return (
    
//       {children}
    
//   )
// }

// function DutchBeer() {
//   return (
//     <>
//       <h3>Heineken</h3>    
//       <p>Dutch beer</p>
//     </>
//   )

// }

// function IrishBeer() {
//   return (
//     <>
//       <h3>Guinness</h3>
//       <p>IrishBeer</p>
//     </>
//   )
// }

// function App() {
//   return (
//     <>
//       <h1>Beers</h1>
//       <C>
//       <div style= "border-top:1px solid">
//       <DutchBeer/>
//       </div>
//       <div style= "border-top:1px solid">
//       <IrishBeer/>
//       </div>
//       </C>
//     </>
//   )
// } 
//Gimon ERROR

// function Beer(props) {
//   const children = props.children;

//   return (
//     <div style={{borderTop:"1px solid"}}>
//       {children}
//     </div>
//   )
// }

// function DutchBeer() {
//   return (
//     <>
//       <h3>Heineken</h3>    
//       <p>Dutch beer</p>
//     </>
//   )

// }

// function IrishBeer() {
//   return (
//     <>
//       <h3>Guinness</h3>
//       <p>IrishBeer</p>
//     </>
//   )
// }

// function App() {
//   return (
//     <>
//       <h1>Beers</h1>
//       <Beer>
//         <DutchBeer/>
//       </Beer>
//       <Beer>
//         <IrishBeer/>
//       </Beer>
//     </>
//   )
// } 
// // {need to change and check !}

// // Component tree

// // function Foo(props) {
// //   const children = props.children;

// //   return (
// //     <fieldset>
// //       <legend>Foo</legend>
// //       {children}
// //     </fieldset>
// //   )
// // }
// // function Bar(props) {
// //   const children = props.children;

// //   return (
// //     <fieldset>
// //       <legend>Bar</legend>
// //       {children}
// //     </fieldset>
// //   )
// // }
// // function Baz() {
// //   return <div>Baz</div>
// // }

// // function App() {
// //   return (
// //     <Foo>
// //       <Bar>
// //         <Baz/>
// //       </Bar>
// //     </Foo>
// //   )
// // }

// // Q. 

// //Gimon answer ERROR
// function Beers(props) {
//   const childern = props.childern

//   return (
//     <fieldset>
//       <legend>{Beers}</legend>
//     </fieldset>
//   )
// }
// function EuropeanBeers(props) {
//   const childern = props.childern

//   return (
//     <fieldset>
//       <legend>European beers</legend>
//         <li>Heineken</li>
//         <li>Guinness</li>
//     </fieldset>
//   )
// }
// function AsianBeers(props) {
//   const childern = props.childern

//   return (
//     <fieldset>
//       <legend>Asian beers</legend>
//         <li>Asahi</li>
//         <li>Kloud</li>
//     </fieldset>
//   )
// }

// function App(){
//   return (
//     <Beers>
//       <Beers>
//         <EuropeanBeers/>
//       </Beers>
//       <Beers>
//         <AsianBeers/>
//       </Beers>
//     </Beers>
//   )
// }
//Gimon answer ERROR

// function Beer(props) {
//   const children = props.children;

//   return (
//     <div style={{borderTop:"1px solid"}}>
//       {children}
//     </div>
//   )
// }

// function DutchBeer() {
//   return (
//     <>
//       <h3>Heineken</h3>    
//       <p>Dutch beer</p>
//     </>
//   )

// }

// function IrishBeer() {
//   return (
//     <>
//       <h3>Guinness</h3>
//       <p>IrishBeer</p>
//     </>
//   )
// }

// function App() {
//   return (
//     <>
//       <h1>Beers</h1>
//       <Beer>
//         <DutchBeer/>
//       </Beer>
//       <Beer>
//         <IrishBeer/>
//       </Beer>
//     </>
//   )
// } 
// {need to change and check !}

// Component tree

// function Foo(props) {
//   const children = props.children;

//   return (
//     <fieldset>
//       <legend>Foo</legend>
//       {children}
//     </fieldset>
//   )
// }
// function Bar(props) {
//   const children = props.children;

//   return (
//     <fieldset>
//       <legend>Bar</legend>
//       {children}
//     </fieldset>
//   )
// }
// function Baz() {
//   return <div>Baz</div>
// }

// function App() {
//   return (
//     <Foo>
//       <Bar>
//         <Baz/>
//       </Bar>
//     </Foo>
//   )
// }

// Q. 

//Gimon answer ERROR
function Beers(props) {
  const children = props.children

  return (
    <fieldset>
      <legend>Beers</legend>
      {children}
    </fieldset>
  )
}
function EuropeanBeers(props) {
  const children = props.children

  return (
    <fieldset>
      <legend>European beers</legend>
        {children}
    </fieldset>
  )
}
function AsianBeers(props) {
  const children = props.children

  return (
    <fieldset>
      <legend>Asian beers</legend>
        {children}
    </fieldset>
  )
}

function App (){
  return (
    <Beers>
      <EuropeanBeers>
        <ul>
          <li>Heineken</li>
          <li>Guinness</li>
        </ul>
      </EuropeanBeers>
      <AsianBeers>
        <ul>
          <li>Asahi</li>
          <li>Kloud</li>
        </ul>
      </AsianBeers>
    </Beers>
  )
}

