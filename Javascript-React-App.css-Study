import React, {createContext, useContext, useEffect, useState} from 'react';
import {BrowserRouter as Router, Routes, Route, Link, Outer, useParams, useNavigate} from
"react-router-dom"
import './App.css';

export default App;

// function App() {
//   return <h1>Hello React</h1>
// }

// # JSX 
// JavaScript의 확장문법
// 선언형 문법
// Babel 이 JSX를 JavaScript Object로 변환한다
// Babel = JavaScrip이 트랜스컴파일러이다. 

// function App() {
//   return <h1>Hello React</h1>
// }

// JSX 없이 Virtual DOM 만들기
// function App() {
//   const h1 = React.createElement('h1', 'null', 'Hello React');

//   return h1;
// }

// # JSX 문법
// function App() {
//   return (
//     <div>
//       <h2>elements는 하나의 element로 감싸져야 한다</h2>
//       <div>Foo</div>
//       <div>Bar</div>
//       <div>Baz</div>
//     </div>
//   )
// }

// function App() {
//   return (
//     <div>
//       <h2>elements를 하나의 element로 감싸지 않은 경우 에러 발생</h2>
//       <div>Foo</div>
//       <div>Bar</div>
//       <div>Baz</div>
//     </div>
//   ) 
// }

// React.Fragment

// function App() {
//   return (
//     // DOM에 element를 추가하지 않고 자식을 그룹화 할 수 있다.
//     <React.Fragment>
//       <h2>React.Fragment</h2>
//       <div>Foo</div>
//       <div>Bar</div>
//       <div>Baz</div>
//     </React.Fragment>
//   )
// }

// function App() {
//   return (
//     <>
//       <h2>React.Fragment</h2>
//       <div>Foo</div>
//       <div>Bar</div>
//       <div>Baz</div>
//     </>
//   )
// }

// JSX attribute

// function App() {
//   return (
//     <>
//       <h2>JSX attribute</h2>
//       <ul>
//         <li><a href="#" target="_blank">Foo</a></li>
//         <li><img src="" alt="Bar" /></li>
//         <li><input type="text" placeholder="Baz" autoComplete="off"/></li>
//       </ul>
//     </>
//   )
// }

//JSX inline style attribute

// function App() {
//   return (
//     <>
//       <h2>JSX inline style</h2>
//       {/* style attribute에 object를 인자로 전달한다*/}
//       <ul style={{border: 1px }}>  ?????
//         <li style={{textDecoration: "underline"}}>Foo</li>
//         <li>bar</li>
//         <li>baz</li>
//       </ul>
//     </>
//   )
// }

//JSX 내에서 JS 코드 작성하기

// function App() {
//   const foo ="Foo";

//   return (
//     <>
//       <h2>JSX 내에서 코드 작성하기</h2>
//       <div>{foo}</div>
//       <div>{"Ba"+"r"}</div>
//       <div>{"Baz".valueOf()}</div>
//     </>
//   )
// }

// Q. JavaScript 변수와 inline style을 사용하여 virtualDOM을 완성시켜보세요
// function App() {
//   const dutchBeer = "Heineken";
//   const irishBeer = "Guinness";
//   const japanBeer = "Asahi";

//   const soldOut = {
//     textDectoration: "line-through",
//     color: "#ddd"
//   }

//   return (
//     <>
//     <h2>Beers</h2>
//         <li>{dutchBeer}</li>
//         <li style={soldOut}>{irishBeer}</li>
//         <li>{japanBeer}</li>
//     </>
//   )
// }

//JSX 내에서 조건문 사용하기 
// 논리연산자, 삼항연산자
// && (AND) : expr1 && expr2
// || (OR) : expr1 || expr2
// ! (NOT)
// 삼항연산자 (Ternary) : 조건? expr if true : expr if false

// function App() {

//   //&&
//   console.log(true && 1); //1
//   console.log(1 && 0); //0
//   console.log(0 && 1); //0
//   console.log(0 && false); //0

//   console.log(1>0 && 2>0) //true

//   // ||

//   console.log(1 || true); //1
//   console.log(1 || 0); //1
//   console.log(0 && 1); //0
//   console.log(0 && false); //0   -> 1 true, 0 false

//   return (
//     <>
//         <h2>JSX내에서 조건문 사용하기</h2>
//         <div>{true && "Foo"}</div> 
//         <div>{false || "Bar"}</div> 
//         <div>{!true ? "" : "Baz"}</div>
//     </>
//   )
// }

//JSX 내에서 반복문 사용하기

// function App() {
//   const arr = ["Foo", "Bar", "Baz"];

//   return (
//     <>
//       <h2>JSX에서 반복문</h2>
//       <ul>
//         {arr.map((item, index) =>(
//           <li key={index}>{item}</li>
//         ))}
//       </ul>
//     </>
//   )
// }

// function App() {
//   const arr = ["Foo","Bar","Baz"];

//   return (
//     <>
//       <h2>JSX에서 반복문</h2>
//       <ul>
//         {arr.map((item, index) => (
//           <li key={index}>{item}</li>
//         ))}
//       </ul>
//     </>
//   )
// }

// function App() {
//   const arr = ["Foo", "Bar", "Baz"];

//   const list = arr.map((item, index) => (
//     <li key={index}>{item}</li>
//   ))
//   return(
//     <>
//       <h2>JSX 반복문</h2>
//       <ul>
//         {list}
//       </ul>
//     </>
//   )
// }

// function App() {
//   const arr = ["Foo", "Bar", "Baz"];

//   const list = arr.map((item, index) => (
//     <li key={index}>{item}</li>
//   ))

//   return (
//     <>
//       <h2>JSX 반복문</h2>
//       <ul>
//         {list}
//       </ul>
//     </>
//   )
// }

// //화살표함수 중괄호 생략 설명
// function App() {}

// // // 화살표함수에서 {} (중괄호)가 없으면 화살표 뒤의 값을 return한다
// // const f = () => "foo"

// // // const f = () => {
// // //   return "foo"
// // // }

// // console.log(f())




// //Q. 반복문을 사용해서 맥주 리스트를 출력해보세요 

// const beers = [
//   {name: "Heineken", origin: "Netherlands"},
//   {name: "Guinness", origin: "Ireland"},
//   {name: "Asahi", origin: "Japan"}
// ]


// function App() {
  
//   const beers = [
//     {name: "Heineken", origin: "Netherlands"},
//     {name: "Guinness", origin: "Ireland"},
//     {name: "Asahi", origin: "Japan"}
//   ]

//   const list = beers.map((beers, index) => (
//     <li key={index}>{beers.name}, {beers.origin}</li>
//   ))

//   // const list = beers.map((beer,index) => {
//   //   return <li key={index}>{beer.name}</li>
//   // })

//   // const list = beers.map((beers, index) => <li key={index}>{beers.name}</li>)

//   return (
//     <>
//       <h2>Beers</h2>
//       <ul>
//         {list}
//       </ul>
//     </>
//   )
// }


// # COMPONENTS (컴포넌트)
// 정의: 복잡한 UI를 빌드하기 위한 재사용 가능하고 독립적인 부품

// 컴포넌트 기본 
// 함수컴포넌터와 클래스 컴포넌트가 있다

// App Components
// 함수컴포넌트는 기본적으로 함수이다. 
// function App() {

//   // 코드 작성
//   console.log("App Loaded!")

//   // VirtualDOM을 return한다
//   return <h1>App</h1>
// }

// 컴포넌트의 합성 (Composition)
// 코드를 재사용한다

// 컴포넌트의 첫글자는 대문자여야 한다.
// function Foo() {
//   return <li>Foo</li>
// }
// function Bar() {
//   return <li>Bar</li>
// }
// function Baz() {
//   return <li>Baz</li>
// }

// function App() {
//   return (
//     <>
//       <ul>
//         {/*컴포넌트를 합성했다*/}
//         <Foo/>
//         <Bar/>
//         <Baz/>
//       </ul>
//     </>
//   )
// }

// Q. 맥주표를 table element를 이용해서 완성해보세요.
//making beer table with components

// function DutchBeer() {
//   return (
//     <tr>
//       <td>Heineken</td>
//       <td>Netherlands</td>
//       <td>Yes</td>
//     </tr>
//   )
// }

// function IrishBeer() {
//   return (
//     <tr>
//       <td>Guinness</td>
//       <td>Ireland</td>
//       <td>No</td>
//     </tr>
//   )
// }

// function JapaneseBeer() {
//   return (
//       <tr>
//         <td>Asahi</td>
//         <td>Japan</td>
//         <td>Yes</td>
//       </tr>
//   )
// }

// function App() {
//   return (
//     <>
//       <h1>Beers</h1>
//       <table>
//         <thead>
//           <tr>
//             <td>Brand</td>
//             <td>Origin</td>
//             <td>Available</td>
//           </tr>
//         </thead>
//         <tbody>
//           <DutchBeer />
//           <IrishBeer />
//           <JapaneseBeer />
//         </tbody>
//       </table>
//     </>
//   )
// }

// # Props
// 컴포넌트에 전달되는 인자 (parameter)

// function C(props) { // properties (Object)
//   console.log(props); // {key: value,...} 
//   const prop1 = props.prop1;

//   return <li>{prop1}</li>
// }

// function App() {
//   return (
//     <>
//       <h1>App</h1>
//       <ul>
//         {/* C 컴포넌트를 재사용했다 */}
//         <C prop1="Foo" />
//         <C prop1="Bar" />
//         <C prop1="Baz" />
//       </ul>
//     </>
//   )
// }

// Q. using comfornents to make beers list.
// function C(props) {
//   console.log(props);
//   const prop1 = props.prop1;

//   return <li>{props}</li>
// }

// function App() {
//   <>
//     <h1>Beers</h1>
//     <ul>
//       <C prop1="Heineken, Netherlands" />
//       <C prop1="Guinness, Ireland" />
//       <C prop1="Asahi, Japan" />
//     </ul>
//   </>
// } // ERROR

// function Beer(props) {
//   console.log(props);

//   const name = props.name;
//   const origin = props.origin;

//   return <li>{name}, {origin}</li>
// }

// function App() {
//   return (
//     <>
//       <h1>Beers</h1>
//       <ul>
//         <Beer name="Heineken" origin="Netherlands"/>
//         <Beer name="Guinness" origin="Ireland"/>
//         <Beer name="Asahi" origin="Japan"/>
//       </ul>
//     </>
//   )
// }

// Object props

// function C(props) {
//   console.log(props);

//   const o = props.o;

//   return (
//     <ul>
//       <li>Prop1: {o.prop1}</li>
//       <li>Prop2: {o.prop2}</li>
//       <li>Prop3: {o.prop3}</li>
//     </ul>
//   )
// }

// const o = {prop1: "Foo", prop2: "Bar", prop3: "Baz"};

// function App() {
//   return (
//     <>
//       <h1>o</h1>
//       <C o={o}/>
//     </>
//   )
// }

// Q. 삼항연산자 있음... 

// function Beer(props) {
//   const beer = props.beer;

//   return (
//     <ul>
//       <li>Name: {beer.name}</li>
//       <li>Origin: {beer.origin}</li>
//       <li>Available: {beer.available ? "Yes" : "No"}</li>
//     </ul>
//   )
// }

// const irishBeer = {name: "Guinness", origin: "Ireland", Available: "false"};

// function App() {
//   return (
//     <>
//       <h1>Beer</h1>
//       <Beer beer={irishBeer} />
//     </>
//   )
// }

// Q. 컴포넌트 반복적으로 출력하기
// JSX 에서 Array.map()를 사용하세요.
// Object props가 전달이 되겠죠? 
// const beers = [
//   {name: "Heineken", origin: "Netherlands"},
//   {name: "Guinness", origin: "Ireland"},
//   {name: "Asahi", origin: "Japan"},
// ]

// const beersList = arr.beers

// function Beer(props) {
//   console.log(props);

//   return (
//     <>
//       <li>{arr.beers}</li>
//     </>
//   )
// }

// function App() {
//   return (
//     <>
//       <h1>Beer</h1>
//       <
//     </>
//   )
// }


// Question - Answer

// const beers = [
//     {name: "Heineken", origin: "Netherlands"},
//     {name: "Guinness", origin: "Ireland"},
//     {name: "Asahi", origin: "Japan"},
// ]

// function Beer(props) {
  
//   const beer = props.beer;

//   return <li>{beer.name}, {beer.origin}</li>
// }

// function App() {

//   const list = beers.map((beer, index) => (
//     <Beer key={index} beer={beer} />
//   ));

//   return (
//     <>
//       <h1>Beers</h1>
//       <ul>
//         {list}
//       </ul>
//     </>
//   )
// }


// Children props;

// function C(props) {
//   console.log(props); // console.log --> {children :...}
//   // children은 속성 키가  children이다. 
//   const children = props.children;

//   return (
//     <fieldset>
//       <legend>C</legend>
//       {children}
//     </fieldset>
//   )
// }

// function Foo() {
//   return <div>Foo</div>
// }

// function App() {
//   return (
//     <>
//       <h1>App</h1>
//       <C>
//         {/* {Foo 컴포넌트는 C컴포넌트의 children이다} */}
//         <Foo />
//       </C>
//     </>
//   )
// }
  
// Q. children props를 이용해서 맥주 리스트를 만들어보세요

// Gimon .. ERROR
// function Beer(props) {
//   const children = props.children;

//   return (
    
//       {children}
    
//   )
// }

// function DutchBeer() {
//   return (
//     <>
//       <h3>Heineken</h3>    
//       <p>Dutch beer</p>
//     </>
//   )

// }

// function IrishBeer() {
//   return (
//     <>
//       <h3>Guinness</h3>
//       <p>IrishBeer</p>
//     </>
//   )
// }

// function App() {
//   return (
//     <>
//       <h1>Beers</h1>
//       <C>
//       <div style= "border-top:1px solid">
//       <DutchBeer/>
//       </div>
//       <div style= "border-top:1px solid">
//       <IrishBeer/>
//       </div>
//       </C>
//     </>
//   )
// } 
//Gimon ERROR

// function Beer(props) {
//   const children = props.children;

//   return (
//     <div style={{borderTop:"1px solid"}}>
//       {children}
//     </div>
//   )
// }

// function DutchBeer() {
//   return (
//     <>
//       <h3>Heineken</h3>    
//       <p>Dutch beer</p>
//     </>
//   )

// }

// function IrishBeer() {
//   return (
//     <>
//       <h3>Guinness</h3>
//       <p>IrishBeer</p>
//     </>
//   )
// }

// function App() {
//   return (
//     <>
//       <h1>Beers</h1>
//       <Beer>
//         <DutchBeer/>
//       </Beer>
//       <Beer>
//         <IrishBeer/>
//       </Beer>
//     </>
//   )
// } 
// // {need to change and check !}

// // Component tree

// // function Foo(props) {
// //   const children = props.children;

// //   return (
// //     <fieldset>
// //       <legend>Foo</legend>
// //       {children}
// //     </fieldset>
// //   )
// // }
// // function Bar(props) {
// //   const children = props.children;

// //   return (
// //     <fieldset>
// //       <legend>Bar</legend>
// //       {children}
// //     </fieldset>
// //   )
// // }
// // function Baz() {
// //   return <div>Baz</div>
// // }

// // function App() {
// //   return (
// //     <Foo>
// //       <Bar>
// //         <Baz/>
// //       </Bar>
// //     </Foo>
// //   )
// // }

// // Q. 

// //Gimon answer ERROR
// function Beers(props) {
//   const childern = props.childern

//   return (
//     <fieldset>
//       <legend>{Beers}</legend>
//     </fieldset>
//   )
// }
// function EuropeanBeers(props) {
//   const childern = props.childern

//   return (
//     <fieldset>
//       <legend>European beers</legend>
//         <li>Heineken</li>
//         <li>Guinness</li>
//     </fieldset>
//   )
// }
// function AsianBeers(props) {
//   const childern = props.childern

//   return (
//     <fieldset>
//       <legend>Asian beers</legend>
//         <li>Asahi</li>
//         <li>Kloud</li>
//     </fieldset>
//   )
// }

// function App(){
//   return (
//     <Beers>
//       <Beers>
//         <EuropeanBeers/>
//       </Beers>
//       <Beers>
//         <AsianBeers/>
//       </Beers>
//     </Beers>
//   )
// }
//Gimon answer ERROR

// function Beer(props) {
//   const children = props.children;

//   return (
//     <div style={{borderTop:"1px solid"}}>
//       {children}
//     </div>
//   )
// }

// function DutchBeer() {
//   return (
//     <>
//       <h3>Heineken</h3>    
//       <p>Dutch beer</p>
//     </>
//   )

// }

// function IrishBeer() {
//   return (
//     <>
//       <h3>Guinness</h3>
//       <p>IrishBeer</p>
//     </>
//   )
// }

// function App() {
//   return (
//     <>
//       <h1>Beers</h1>
//       <Beer>
//         <DutchBeer/>
//       </Beer>
//       <Beer>
//         <IrishBeer/>
//       </Beer>
//     </>
//   )
// } 
// {need to change and check !}

// Component tree

// function Foo(props) {
//   const children = props.children;

//   return (
//     <fieldset>
//       <legend>Foo</legend>
//       {children}
//     </fieldset>
//   )
// }
// function Bar(props) {
//   const children = props.children;

//   return (
//     <fieldset>
//       <legend>Bar</legend>
//       {children}
//     </fieldset>
//   )
// }
// function Baz() {
//   return <div>Baz</div>
// }

// function App() {
//   return (
//     <Foo>
//       <Bar>
//         <Baz/>
//       </Bar>
//     </Foo>
//   )
// }

// Q. 

// function Beers(props) {
//   const children = props.children

//   return (
//     <fieldset>
//       <legend>Beers</legend>
//       {children}
//     </fieldset>
//   )
// }
// function EuropeanBeers(props) {
//   const children = props.children

//   return (
//     <fieldset>
//       <legend>European beers</legend>
//         {children}
//     </fieldset>
//   )
// }
// function AsianBeers(props) {
//   const children = props.children

//   return (
//     <fieldset>
//       <legend>Asian beers</legend>
//         {children}
//     </fieldset>
//   )
// }

// function App (){
//   return (
//     <Beers>
//       <EuropeanBeers>
//         <ul>
//           <li>Heineken</li>
//           <li>Guinness</li>
//         </ul>
//       </EuropeanBeers>
//       <AsianBeers>
//         <ul>
//           <li>Asahi</li>
//           <li>Kloud</li>
//         </ul>
//       </AsianBeers>
//     </Beers>
//   )
// }

// function Foo() {
//   return <li>Foo</li>
// }
// function Bar() {
//   return <li>Bar</li>
// }
// function Baz() {
//   return <li>Baz</li>
// }

// function App() {
//   return (
//     <>
//       <h1>list</h1>
//       <Foo/>
//       <Bar/>
//       <Baz/>
//     </>
//   )
// }



// children에 props 전달하기
// const FooContext = createContext();

// function Foo(props) {
//   const children = props.children;


//   // 함수범위(지역범위
//   // Foo컴포넌트 내에서만 접근할 수 있다.
//   const foo = "FOO";

//   return (
//     <fieldset>
//       <legend>Foo</legend>
//       <FooContext.Provider value={foo}>
//         {children}
//       </FooContext.Provider>
//     </fieldset>
//   )
// }

// function Bar(props) {
//   const children = props.children;
  
//   const x = useContext(FooContext);
//   console.log(x);

//   return (
//     <fieldset>
//       <legend>Bar</legend>
//       {children}
//     </fieldset>
//   )
// }

// function Baz() {
//   const foo = useContext(FooContext);

//   return <div>{foo}</div>
// }

// function App() {
//   return (
//     <Foo>
//       <Bar>
//         <Baz/>
//       </Bar>
//     </Foo>
//   )
// }


// Q.

// const BeersContext = createContext();

// function Beers({children}) {

//   // 재고관리
//   const availability = {
//     guinness: false,
//     asahi: true,
//     kloud: true
//   }

//   return (
//     <>
//       <h1>Beers &#127866;</h1>
//       <BeersContext.Provider value={availability}>
//         {children}
//       </BeersContext.Provider>
//     </>
    
//   )
// }

// function EuropeanBeers({children}) {

//   return (
//     <div>
//       <h2>European beers</h2>
//       {children}
//     </div>

//   )

// }

// function IrishBeers() {
//   const availability = useContext(BeersContext);

//   return(
//     <div>
//       <h3>GUINNESS</h3>
//       <div>Available: {availability.guinness ? "Yes" : "No"}</div>
//     </div>
//   )
// }

// function AsianBeers({children}) {

//   return(
//     <div>
//       <h2>Asian beers</h2>
//       {children}
//     </div>
//   )
// }

// function JapaneseBeers() {
//   const availablilty = useContext(BeersContext);

//   return(
//     <div>
//       <h3>ASAHI</h3>
//       <div>Available: {availability.asahi ? "Yes":"No"} </div>
//     </div>
//   )
// }

// function KoreanBeers() {

//   return(
//     <div>
//       <h3>KLOUD</h3>
//       <div>Available: {availability.kloud ? "Yes":"No"}</div>
//     </div>
//   )
// }

// function App() {
//   return (
//     <Beers>
//       <EuropeanBeers>
//         <IrishBeers/>
//       </EuropeanBeers>
//       <AsianBeers>
//         <JapaneseBeers/>
//         <KoreanBeers/>
//       </AsianBeers>
//     </Beers>
//   )

// }



// # Event

// function App() {
//   function (e) {
//     console.log(e.target);
//   }

//   // attribute: onEventName={callback}
//   // addEventListener("click", callback)

//   return (
//     <>
//       <h1>click event</h1>
//       <button onClick={handleClick}>Button</button>
//     </>
//   )
// }

// callback에 인자를 전달하지 않을 때
// document.body.addEventListener("click", f);

// function f(e) {
//   console.log(e);
// } // 기존 일반 JavaScript에서 쓰는 방식. 

// function App() {};

// 위에 것과 같음 (익명함수 사용)
// document.body.addEventListener("click", (e) => {
//   console.log(e)
// })

// function App() {};

// callback에 인자가 있을 때
// document.body.addEventListener("click", () => {
//   f("Foo");
// })

// function f(foo) {
//   console.log(foo);
// }

// function App() {};


// 익명함수사용 callback에 인자가 있을 때. 
// function App() {
//   function handleClick(foo) {
//     console.log(foo);
//   }

//   return (
//     <>
//       <h1>click event</h1>
//       <button onClick={() => handleClick("Foo")}>Button</button>
//     </>
//   )
// }


//
// function App() {
//   function handleClick(x) {
//     console.log(x)
//   }

//   // 이벤트에서 다른 element가 같은 callback을 사용할 때

//   return (
//     <>
//       <h1>Accordion</h1>
//       <button onClick={() => handleClick("Foo")}>Foo</button>
//       <button onClick={() => handleClick("Bar")}>Bar</button>
//       <button onClick={() => handleClick("Baz")}>Baz</button>
//     </>
//   )
// }


// change event

// function App() {
//   function handleChange(e) {
//     console.log(e.target.value);
//   }

//   // change (change 의 input 이 변할 때)
//   // keyup (트릭어 함수 . 키보드에 입력할 때?? )ㅡ 다르지만 비슷함. 

//   return (
//     <>
//       <h1>change</h1>
//       <input type="text" onChange={handleChange} />
//     </>
//   )
// }

//  Q Login page . 

// function App() {
  
//   function handleChange(e) {
//     console.log(e.target.value);
//   }

//   return (
//     <>
//       <h1>Login</h1>
//       <h3>Username<input type="text" onChange={handleChange}/></h3>
//       <h3>Password<input type="text" onChange={handleChange}/></h3>
//     </>
//   )
// }

// function App() {

//   function handleChange(e) {
//     console.log(e.target.value);
//   }

//   return (
//     <form>
//       <h1>Login</h1>
//       <div>
//         <labal htmlFor="username">Username</labal>
//         <input 
//           type="text"
//           id="username"
//           name="username"
//           autoComplete="off"
//           onChange={handleChange}
//           />
//       </div>
//       <div>
//         <label htmlFor="password">Password</label>
//         <input
//           type="password"
//           id="password"
//           name="password"
//           autoComplete="off"
//           onChange={handleChange}
//           />
//       </div>
//     </form>
//   )
// }

// function App() {

//   function handleChange(e) {
//     const name = e.target.name;
//     const value = e.target.value;

//     console.log(name.value);
//   }

//   return (
//     <form>
//       <h1>Login</h1>
//       <div>
//         <labal htmlFor="username">Username</labal>
//         <input 
//           type="text"
//           id="username"
//           name="username"
//           autoComplete="off"
//           onChange={handleChange}
//           />
//       </div>
//       <div>
//         <label htmlFor="password">Password</label>
//         <input
//           type="password"
//           id="password"
//           name="password"
//           autoComplete="off"
//           onChange={handleChange}
//           />
//       </div>
//     </form>
//   )
// }



// # submit event

// function App() {
//   function handleSubmit(e) {
//     // form이 제출되지 않음
//     e.preventDefault();

//     console.log("제출되었습니다")
//   }
  
//   return (
//     <form onSubmit={handleSubmit}>
//       <h1>form</h1>
//       <p>...</p>
//       <button type="submit">Submit</button>
//     </form>
//   )
// }




//  # DOM 업데이트 (import needed : usecontext)
// function App() {
//   // const [state, setState] = useState(initialValue);
//   // state: 변수 
//   // setState: state를 업데이트 하는 메서드
//   // initialValue: state의 초기값
//   // onClick : Event handler 이벤트를 처리하는 함수. 

//   const [count, setCount] = useState(0);

//   return (
//     <>
//       <h1>Count</h1>
//       <p>{count}</p>
//       <button onClick={() => setCount(count + 1)}>Add</button>
//     </>
//   )
// }




// state Hook 없이 DOM 업데이트 하기
// function App() { /* 컴포넌트 */
//   let count = 0;

//   // DOM을 업데이트 하기 위해서는 virtualDOM을 다시 return해야 한다
//   // virtualDOM을 다시 return하기 위해서는 컴포넌트를 다시 실행해야 한다. 
//   // setState는 컴포넌트를 다시 실행한다
//   // DOM이 업데이트 된다
//   function handleClick(e) {
//     count++;
//     console.log(count);
//   } /* 이벤트 핸들러로 콘솔에 카운트 출력 DOM에는 업데이트 되지 않는다.*/

//   return ( /* VirtualDom*/
//     <>
//       <h1>Count</h1>
//       <p>{count}</p>
//       <button onClick={handleClick}>Add</button> 
//     </>
//   )
// }




// 시계
// function App() {
//   console.log("App Loaded!");
//   const initialTime = new Date().toLocaleTimeString();
//   const [time, setTime] = useState(initialTime);

//   setTimeout(() => {
//     const updatedTime = new Date().toLocaleTimeString();
//     setTime(updatedTime);
//   }, 1000)

//   return (
//     <>
//       <h1>시계</h1>
//       <p>{time}</p>
//     </>
//   )
// }




// Q. 
// function App() {
//   const [count, setCount] = useState(0);

//   return (
//     <>
//       <h1>Count</h1>
//       <p>{count}</p>
//       <button onClick={() => setCount(count - 1)}>-</button>
//       <button onClick={() => setCount(count + 1)}>+</button>
//     </>
//   )
// }


// Q.
// function App() {
//   const [subscribe, setSubscribe] = useState(false);

//   return (
//     <>
//       <h1>구독과 좋아요 알림설정까지 부탁드려요</h1>
//       <button onClick={() => setSubscribe (!subscribe)}>
//         {!subscribe ? "구독하기" : "구독중"}</button>
//     </>
//   )
// } 




// function App() {
//   const [subscribe, setSubscribe] = useState(false);
//   console.log(subscribe) // false
//   // console.log(!subscribe) // ture

//   function handleClick(e) {
//     // setSubscribe(true) // 함수 작동

//     if (subscribe) { // 구독취소
//       setSubscribe(false)
//     } else { // 구독하기
//       setSubscribe(true)
//     }
//   }

//   return (
//     <>
//       <h1>구독하기</h1>
//       <button onClick={handleClick}>
//         {!subscribe ? "구독하기" : "구독중"}
//       </button>
//     </>
//   )
// }

// Q. 
// function App() {
//   const [subscribe, setSubscribe] = useState(false);
//   const [subscribers, setSubscribers] = useState(1000);

//   function handleClick(subscribe) {
//     if (subscribe) {
//       setSubscribe(false);
//       setSubscribers(subscribers - 1)
//     } else {
//       setSubscribe(true);
//       setSubscribers(subscribers + 1)
//     }
//   }

//   return (
//     <>
//       <h1>Subscribe</h1>
//       <p>구독자 수:{subscribers}</p>
//       <button onClick={() => handleClick(subscribe)}>
//       {!subscribe ? "구독하기" : "구독중"}</button>
//     </>
//   )
// }



// # Form 다루기

// function App(){
//   const [username, setUsername] = useState("");

//   function handleSubmit(e) {
//     e.preventDefault();
//     console.log("username:", username);
//     setUsername("");
//   }

//   function handleChange(e) {
//     const value = e.target.value;
//     const username = value.trim(); /* trim : value 앞뒤의 공백제거 */

//     setUsername(username);
//     // !"" // ture 논리연산자 빈문자열에 ! = ture
//     // !"foo" // false 논리연산자 문자열에 ! = false 
//   }

//   return (
//     <form onSubmit={handleSubmit}>
//       <h1>Login</h1>
//       <input
//         type="text"
//         placeholder="Username"
//         value={username}
//         onChange={handleChange} /*input의 value를 출력하고 있다 event handler 확인*/
//         />
//       <button 
//         type="submit"
//         disabled={!username} /* disabled = {ture} 버튼을 누를 수 없는 상태 */
//         >
//        login 
//       </button>
//     </form>
//   )
// }

// Q.
// function App() {
//   const [password, setPassword] = useState("");
//   const [show, setShow] = useState(false);
  
//   function handleSubmit(e){
//     e.preventDafault();
//     console.log("username:", username);
//   }


//   return (
//     <form>
//       <h1>Login</h1>
//       <input type="password"
//       />
//       <button onClick={()=> handleClick(show)}>

//       </button>
//     </form>
//   )
// }

//Q. Password toggle
// function App() {
//   const [type, setType] = useState("password");

//   function handleClick() {
//     if (type==="password") {
//       setType("text");
//     } else {
//       setType("password");
//     }
//   }

//   return (
//     <form>
//       <h1>Login</h1>
//       <input type={type} placeholder="Password" />
//       <button type= "button" onClick={handleClick}>
//         {type==="password" ? "Show" : "Hide"}
//       </button>
//     </form>
//   )
// }



// # Live search : 일치하는 결과를 실시간으로 보여줌.

// function App() {
//   const [beers, setBeers] = useState([]); 

//   function handleChange(e) {
//     const name = e.target.value;

//     if (!name) { // 입력이 되지 않았을 때 리스트가 화면에 표시되지 안도록.. 
//       setBeers([]); 
//       return;
//     }

//     const DATA = [
//       { id : "b1", name: "Heineken"},
//       { id : "b2", name: "Guinness"},
//       { id : "b3", name: "Kloud"},
//       { id : "b4", name: "KGB"},
//       { id : "b5", name: "Asahi"},
//     ];   

//     const updatedBeers = DATA.filter(beer => {
//       // String.startsWith(p): String이 p로 시작하면 true 아니면 false를 return한다.
//       if (beer.name.startsWith(name)) {
//         return beer;
//       }
//     })

//     // console.log(updatedBeers);

//     setBeers(updatedBeers);

//   }

//   const beerList = beers.map((beer, index) => (
//     <li key={index}>{beer.name}</li>
//   ))

//   return (
//     <>
//       <h1>Live search</h1>
//       <input
//         type="text"
//         onChange={handleChange}
//         placeholder="Search"
//       />
//     <ul>
//       {beerList}
//     </ul>
//     </>
//   )
// }

//Beer form: create
// const initialBeers = [
//   {id: "b1", name: "Heineken"},
// ]

// function App() {
//   const [beers, setBeers] = useState(initialBeers);
//   const [name, setName] = useState("");

//   function handleSubmit(e){
//     //use preventDefault and print name state at Console 
//     e.preventDefault();

//     console.log(name);

//     const newBeer = {id: Math.random(), name}

//     console.log(newBeer);

//     // beers에 newBeer를 추가한다
//     const updatedBeers = [...beers, newBeer];

//     console.log(updatedBeers);

//     // beers state를 업데이트 한다.
//     setBeers(updatedBeers);

//     setName("");
//   }

//   function handleChange(e){
//     const name = e.target.value;
//     setName(name);
//   }

//   const beerList = beers.map(beer => (
//     <li key={beer.id}>
//       {beer.name}
//     </li>
//   ))

//   return (
//     <>
//       <h1>Beers</h1>
//       <form onSubmit={handleSubmit}>
//         <input
//           type="text"
//           placeholder="Guinness"
//           onChange={handleChange}
//           value={name}
//         />
//         <button
//           type="submit"
//           disabled={!name} // 제출 할 수 없는 상태 (입력되지 않은 상태에서..)
//         >
//           Add
//         </button>

//         <ul> 
//           {beerList}  
//         </ul>
//       </form>
//     </>
//   )
// }
 

// Beer form : Delete

// const initialBeers = [
//   {id: "b1", name: "Heineken"},
//   {id: "b2", name: "Guinness"},
//   {id: "b3", name: "Kloud"}
// ];

// function App() {
//   const [beers, setBeers] = useState(initialBeers);

//   function deleteBeer(beerId) {
//     console.log(beerId)
    
//     return;

//     const updatedBeers = beers.filter(beer => {
//       if (beer.id!==beerId) {
//         return beer;
//       }
//     })

//     setBeers(updatedBeers);
//   }

//   const beerList = beers.map(beer => (
//     <li key={beer.id}>
//       {beer.name} {"  "}
//       <button onClick={() => deleteBeer(beer.id)}>Delete</button>
//     </li>   
//   ))

//   return (
//     <>
//       <h1>Beers</h1>
//       <form>
//         <input
//           type="text"
//           placeholder="Guinness"
//           disabled={true}
//         />
//         <button
//           type="submit"
//           disabled={true}
//         >
//           Add
//         </button>
//       </form>
//       <ul>
//         {beerList}
//       </ul>
//     </>
//   )
// }


// const initialBeers = [
//   {id: "b1", name: "Heineken", available: true},
//   {id: "b2", name: "Guinness", available: false},
//   {id: "b3", name: "Kloud", available: true}
// ];

// function App() {
//   const [beers, setBeers] = useState(initialBeers);

//   function editBeer(beerId) {
//     console.log(beerId);
//   }

//   const beerList = beers.map(beer => (
//     <li key={beer.id}>
//       {beer.name} {" "}
//         <button onClick={() => editBeer(beer.id)}>
//           {beer.available ? "판매중":"품절"}
//         </button>
//     </li>
//   ))

//   return (
//     <>
//       <h1>Beers</h1>
//       <form>
//         <input
//           type="text"
//           placeholder="Guinness"
//           disabled={true}
//         />
//         <button 
//           type="submit"
//           disabled={true}
//         >
//           Add
//         </button>
//       </form>
//       <ul>
//         {beerList}
//       </ul>
//     </>
//   )
// }


// const AuthContext = createContext();

// function AuthProvider({children}) {
//     // AuthProvider의 children은 user에 접근하능하다
//     const [user, setUser] = useState(null);

//     function signIn(username) {
//         setUser(username);
//     }

//     function signOut() {
//         setUser(null)
//     }

//     const value = {user, signIn, signOut};

//     return (
//         <AuthContext.Provider value={value}>
//             {children}
//         </AuthContext.Provider>
//     )
// }

// function Home() {
//     return <h1>Home</h1>
// }

// function Posts() {
//     return (
//         <>
//             <h1>Posts</h1>
//             <ul>
//                 <li>
//                     <Link to='/post/p1'>Post 1</Link>
//                 </li>
//                 <li>
//                     <Link to='/post/p2'>Post 2</Link>
//                 </li>
//             </ul>
//         </>
//     )
// }

// function Post() {
//     const auth = useContext(AuthContext);

//     const params = useParams();
//     const postId = params.postId;

//     if (!auth.user) {
//         return <p>Unauthorized</p>
//     }

//     return (
//         <>
//             <h1>Post</h1>
//             <p>{postId}</p>
//         </>
//     )
// }

// function NotFound() {
//     return <h1>404 NotFound</h1>
// }

// function Login() {
//     const auth = useContext(AuthContext);
//     const [username, setUsername] = useState("");

//     function handleSubmit(e) {
//         e.preventDefault();
//         auth.signIn(username);
//     }

//     const loginTemplate = (
//         <from onSubmit={handleSubmit}>
//             <h1>Sign in</h1>
//             <input type="text" onChange={(e) => setUsername(e.target.value)}></input>
//             <button type="submit">Submit</button>
//         </from>
//     )

//     const logoutTmeplate = (
//         <div>
//             <h1>Sign out</h1>
//             <p>{auth.user}</p>
//             <button onClick={auth.signOut}>Submit</button>
//         </div>
//     )

//     return auth.user ? logoutTmeplate : loginTemplate;
// }

// function App() {
//     return (
//         <Router>
//             <nav>
//                 <ul>
//                     <li>
//                         <Link to="/">Home</Link>
//                     </li>
//                     <li>
//                         <Link to="posts">Post</Link>
//                     </li>
//                     <li>
//                         <Link to="login">Login</Link>
//                     </li>
//                 </ul>
//             </nav>
//             <AuthProvider>
//                 <Routes>
//                     <Route path="/" element={<Home />} />
//                     <Route path="posts" element={<Posts />} />
//                     <Route path="post/:postId" element={<Post />} />
//                     <Route path="login" element={<Login />} />
//                     <Route path="*" element={<NotFound />} />
//                 </Routes>
//             </AuthProvider>
//         </Router>
//     )
// }


// # fetch data (데이터 요청하기)

// function App() {
//     const [count, setCount] = useState(0);

//     // useEffect(Hook)
//     // 비동기적으로 작동한다

//     // 사용방법
//     // useEffect(callback) : 컴포넌트가 실행될 때마다 callback이 실행된다
//     // useEffect(callback, []): 컴포넌트의 최초 실행시에만 callback이 실행된다
//     // useEffect(callback, [dep1, ...]): 컴포넌트의 최초 실행시, dependency가 
//     // 업데이트 될 때마다 callback이 실행된다

//     useEffect(() => {
//         const time = new Date().toLocaleTimeString();
//         console.log(time);
//     }, [])

//     return (
//         <>
//             <h1>App</h1>
//             <p>App이 {count}번 렌더링 되었습니다</p>
//             <button onClick={() => setCount(count + 1)}>App</button>
//         </>

//     )
// }



// API 서버가 2초 뒤에 응답을 준다고 가정한다.
function fakeApi() {
    const beers = [
        {id: "b1", name: "Heineken"},
        {id: "b2", name: "Guinness"},
        {id: "b3", name: "Asahi"}
    ]

    const promise = new Promise((res, rej) => {
        setTimeout(() => {
            res(beers)
        }, 2000)
    })

    return Promise;
}

function App() {
    const [beers, setBeers] = useState(null);
    const [error, setError] = useState(null);
    const [isLoaded, setIsLoaded] = useState(false);

    useEffect(() => {
        fakeApi()
        .then(data => {
            setBeers(data)
        })
        .catch(error => {
            setError(error)
        })
        .finally(() => setIsLoaded(true))
    }, [])

    if (error) {
        return <p>failed to fetch</p>
    }
    if (!isLoaded) {
        return <p>fatching data...</p>
    }
    return (
        <>
            <h1>Beers</h1>
            <ul>
                {beers.map(beer => (
                    <li key={beer.id}>{beer.name}</li>
                ))}
            </ul>
        </>
    )
}


